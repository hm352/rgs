{"version":3,"sources":["images/title.JPG","images/petrolStation.jpg","images/paintings.JPG","images/biomimickry.jpg","images/tape.JPG","images/lad.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","fluid","id","src","title_page","color","petrolStation","lad","Item","Caption","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,iGCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,iC,uSCqG5BC,MAnFf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAWC,OAAK,EAACC,GAAG,SAClB,kBAAC,IAAD,CAAKA,GAAG,cACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,UAAU,OAAOG,IAAKC,QAGjC,kBAAC,IAAD,CAAKF,GAAG,gBACN,kBAAC,IAAD,CAAKF,UAAU,cACb,uDACA,uEACA,kBAAC,IAAD,CAAeK,MAAM,UACrB,kBAAC,IAAD,CAAaA,MAAM,UACnB,kBAAC,IAAD,CAAcA,MAAM,aAI1B,kBAAC,IAAD,CAAWJ,OAAK,EAACC,GAAG,WAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,UAAU,OAAOG,IAAMG,OAEhC,kBAAC,IAAD,KACE,6CAIN,kBAAC,IAAD,CAAWL,OAAK,EAACC,GAAG,iBAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,wDACA,6DAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,UAAU,OAAOG,IAAKI,MAC7B,oEACA,qEAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOP,UAAU,OAAOG,IAAKI,MAC7B,oEACA,qEAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOP,UAAU,OAAOG,IAAKI,MAC7B,oEACA,uEAIN,kBAAC,IAAD,CAAWN,OAAK,EAACC,GAAG,YAClB,kBAAC,IAAD,KACE,kBAAC,IAASM,KAAV,KACI,kBAAC,IAAD,CAAOR,UAAU,OAAOG,IAAKI,MAC/B,kBAAC,IAASE,QAAV,KACE,oEACA,sEAGJ,kBAAC,IAASD,KAAV,KACE,kBAAC,IAAD,CAAOR,UAAU,OAAOG,IAAKI,MAC7B,kBAAC,IAASE,QAAV,KACE,oEACA,sEAGJ,kBAAC,IAASD,KAAV,KACE,kBAAC,IAAD,CAAOR,UAAU,OAAOG,IAAKI,MAC7B,kBAAC,IAASE,QAAV,KACE,oEACA,0EChFMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.744785d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/title.e4d6e57a.JPG\";","module.exports = __webpack_public_path__ + \"static/media/petrolStation.59712e98.jpg\";","module.exports = __webpack_public_path__ + \"static/media/paintings.60ab4a03.JPG\";","module.exports = __webpack_public_path__ + \"static/media/biomimickry.58504cfd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tape.5edd8b4d.JPG\";","module.exports = __webpack_public_path__ + \"static/media/lad.5930773e.jpg\";","import React from 'react';\nimport './App.css';\nimport title_page from './images/title.JPG';\nimport paintings from './images/paintings.JPG';\nimport lad from './images/lad.jpg';\nimport biomimickry from './images/biomimickry.jpg';\nimport tape from './images/tape.JPG';\nimport petrolStation from './images/petrolStation.jpg';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Carousel from 'react-bootstrap/Carousel';\nimport LogoInstagram from 'react-ionicons/lib/LogoInstagram';\nimport LogoYoutube from 'react-ionicons/lib/LogoYoutube';\nimport LogoFacebook from 'react-ionicons/lib/LogoFacebook';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container fluid id=\"title\">\n        <Row id=\"titleImage\">\n          <Col>\n            <Image className=\"full\" src={title_page}></Image>\n          </Col>\n        </Row>\n        <Row id=\"titleContent\">\n          <Col className='titleStuff'>\n            <h1> ROBERT GEORGE SANDERS </h1>\n            <h4> Designer/Artist/Pornstar/Basketballer </h4>\n            <LogoInstagram color='white'></LogoInstagram>\n            <LogoYoutube color='white'></LogoYoutube>\n            <LogoFacebook color='white'></LogoFacebook>\n          </Col>\n        </Row>\n      </Container>\n      <Container fluid id=\"project\">\n        <Row>\n          <Col>\n            <Image className='full' src={ petrolStation }></Image>\n          </Col>\n          <Col>\n            <h1> PROJECTS </h1>\n          </Col>\n        </Row>\n      </Container>\n      <Container fluid id=\"videoShowcase\">\n        <Row>\n          <Col>\n            <h1> Whatever Title you wnt </h1>\n            <h4> by Robert George Saunders </h4>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Image className='full' src={lad}></Image>\n            <h6> some content that about who filmed </h6>\n            <h6> some content that about who filmed </h6>\n          </Col>\n          <Col>\n            <Image className='full' src={lad}></Image>\n            <h6> some content that about who filmed </h6>\n            <h6> some content that about who filmed </h6>\n          </Col>\n          <Col>\n            <Image className='full' src={lad}></Image>\n            <h6> some content that about who filmed </h6>\n            <h6> some content that about who filmed </h6>\n          </Col>\n        </Row>\n      </Container>\n      <Container fluid id=\"carousel\">\n        <Carousel>\n          <Carousel.Item>\n              <Image className='full' src={lad}></Image>\n            <Carousel.Caption>\n              <h6> some content that about who filmed </h6>\n              <h6> some content that about who filmed </h6>\n            </Carousel.Caption>\n          </Carousel.Item>\n          <Carousel.Item>\n            <Image className='full' src={lad}></Image>\n            <Carousel.Caption>\n              <h6> some content that about who filmed </h6>\n              <h6> some content that about who filmed </h6>\n            </Carousel.Caption>\n          </Carousel.Item>\n          <Carousel.Item>\n            <Image className='full' src={lad}></Image>\n            <Carousel.Caption>\n              <h6> some content that about who filmed </h6>\n              <h6> some content that about who filmed </h6>\n            </Carousel.Caption>\n          </Carousel.Item>\n        </Carousel>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}